---
import BaseLayout from "../../../../components/BaseLayout/BaseLayout.astro";
const { id } = Astro.params;
---

<BaseLayout>
  <div class="flex-center flex-col files-dashboard-container">
    <div class="files-card-title-container">
      <h2 id="host-id">{id}</h2>
      <article>
        Expires on
        <span id="expiry-time"> ...</span>
      </article>
    </div>
    <div class="container files-card-container flex-wrap"></div>
  </div>
</BaseLayout>

<script is:inline>
  const hostId = document.getElementById("host-id");
  const cardsContainer = document.getElementsByClassName(
    "files-card-container"
  )[0];

  async function fetchFilesData() {
    const res = await fetch(`/api/hosted/data/${hostId.innerText}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Access-Control-Allow-Origin": "*", // Required for CORS support to work
        credentials: "include", // Required for cookies, authorization headers with HTTPS
        sameSite: "none",
        secure: "true",
      },
    });

    if (res.status !== 200) {
      return window.location.replace(`/hosted/${hostId.innerText}`);
    }

    try {
      const data = await res.json();
      document.getElementById("expiry-time").innerText =
        new Intl.DateTimeFormat().format(new Date(data.expiresAt));
      for (let file of data.files) {
        addFileCard(file);
      }
    } catch {
      return window.location.replace(`/hosted/${hostId.innerText}`);
    }
  }

  async function addFileCard(file) {
    const cardContainer = document.createElement("article");
    cardContainer.classList.add("file-card");
    cardContainer.innerHTML = `
      <span class="file-icon-container">
        ${file.icon}
      </span>
      <h4 class="font-medium">${file.fileName}</h4>
      <p class="file-size">${formatBytes(file.fileSize)}</p>
      <button class="submit-btn" onclick="downloadFile(event)" id="${
        file.id
      }">Download</button>
    `;
    cardsContainer.appendChild(cardContainer);
  }
  function formatBytes(bytes, decimals = 2) {
    if (!+bytes) return "0 Bytes";

    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = [
      "Bytes",
      "KiB",
      "MiB",
      "GiB",
      "TiB",
      "PiB",
      "EiB",
      "ZiB",
      "YiB",
    ];

    const i = Math.floor(Math.log(bytes) / Math.log(k));

    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;
  }
  async function downloadFile(event) {
    let fileId = event.target.id;
    const res = await fetch(`/api/file/${hostId.innerText}/${fileId}`);
    let data = await res.blob();
    let fileName = `${res.headers
      .get("Content-Disposition")
      .split("=")[1]
      .replace(/"/g, "")}`;

    const url = window.URL.createObjectURL(data);
    const a = document.createElement("a");
    a.style.display = "none";
    a.download = fileName;
    a.href = url;
    a.click();
    window.URL.revokeObjectURL(url);
    a.remove();
  }

  fetchFilesData();
</script>
